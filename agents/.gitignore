# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pyproject.toml, it is recommended to check in Pipfile.lock
#   However, in case of collaboration, if having platform-specific dependencies or
#   dependencies having no cross-platform support, pipenv may install dependencies
#   that don't work, or not install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to use a gitignore that is specific to this IDE.
.idea/

# VS Code
.vscode/

# Cursor IDE
.cursor/

# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
*.cab
*.msi
*.msix
*.msm
*.msp

# Linux
*~

# API Keys and Secrets
*.key
*.pem
*.p12
*.pfx
secrets.json
config.json
.secrets/
credentials.json

# AI/ML specific
*.h5
*.hdf5
*.pkl
*.pickle
*.joblib
*.model
*.weights
*.ckpt
*.pb
*.onnx
*.tflite
models/
checkpoints/
experiments/
runs/
logs/
wandb/
mlruns/
.mlflow/

# Data files
data/
datasets/
*.csv
*.xlsx
*.json
*.parquet
*.feather
*.arrow
*.h5
*.hdf5

# Temporary files
temp/
tmp/
*.tmp
*.temp
*.swp
*.swo
*~

# Memory and cache
memory/
cache/
.cache/
*.cache

# Output directories
output/
outputs/
results/
artifacts/

# Notebook outputs (optional - uncomment if you want to ignore all outputs)
# *.ipynb

# Large files (use Git LFS instead)
*.zip
*.tar.gz
*.tar.bz2
*.7z
*.rar

# Local configuration files
local_config.py
local_settings.py
.local/

# Docker
.dockerignore
docker-compose.override.yml

# uv lock file (usually should be committed, but uncomment if needed)
# uv.lock

# Custom additions for this project
test_outputs/
sandbox/
